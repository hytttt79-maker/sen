import json
import os
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

DATA_FILE = 'users_data.json'


def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name,
            'training_completed': False,
            'has_choice': False
        }
        save_data(data)

    user_data = data.get(user_id, {})
    has_choice = user_data.get('has_choice', False)

    if has_choice:
        await update.message.reply_text(
            '–¢—ã —Å–Ω–æ–≤–∞ —Ç—É—ÇüôÇ? –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—åüëÄ, –∫–∞–∫ –¥–µ–ª–∞ü§î?',
            reply_markup=ReplyKeyboardRemove()
        )
    else:
        keyboard = [
            ['‚úîÔ∏è–ø—Ä–æ–π—Ç–∏', '‚ùå–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        message_text = (
            "<code>üñêÔ∏è –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚úîÔ∏è, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µüìå?</code>\n\n"
            "<b>–ß—Ç–æ –±—É–¥–µ—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏:</b>\n"
            "<blockquote>1. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞üìä\n"
            "2. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ãüöó\n"
            "3. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ–Ω—É—Å üéÅ\n"
            "4. –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–¥–µ–∂–¥—ã üëñ\n"
            "5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üì±</blockquote>\n\n"
            "<b>–í—Å–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ –±—É–¥–µ—Ç –∏ –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è, –Ω–æ —É–∂–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>"
        )

        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text
    data = load_data()

    if user_id not in data:
        data[user_id] = {
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name,
            'training_completed': False,
            'has_choice': False
        }

    if text == '‚úîÔ∏è–ø—Ä–æ–π—Ç–∏':
        data[user_id]['training_completed'] = True
        data[user_id]['has_choice'] = True
        save_data(data)
        await update.message.reply_text(
            '–í—ã –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ! ‚úÖ',
            reply_markup=ReplyKeyboardRemove()
        )

    elif text == '‚ùå–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        data[user_id]['training_completed'] = False
        data[user_id]['has_choice'] = True
        save_data(data)
        await update.message.reply_text(
            '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—É—á–µ–Ω–∏—è. ‚ùå',
            reply_markup=ReplyKeyboardRemove()
        )

    save_data(data)


def main():
    application = Application.builder().token("8320402454:AAH-WGbDZr7Q8eD9RiI6WnWJkOtb_T-rJB0").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    application.run_polling()


if __name__ == '__main__':
    main()