import json
import os
import random
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes, CallbackQueryHandler

DATA_FILE = 'users_data.json'
USER_IDS_FILE = 'user_ids.json'


def load_data():
    if os.path.exists(DATA_FILE):
        with open(DATA_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {}


def save_data(data):
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(data, f, ensure_ascii=False, indent=2)


def load_user_ids():
    if os.path.exists(USER_IDS_FILE):
        with open(USER_IDS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)
    return {'next_id': 0, 'users': {}}


def save_user_ids(user_ids):
    with open(USER_IDS_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_ids, f, ensure_ascii=False, indent=2)


def get_user_personal_id(user_id):
    user_ids = load_user_ids()
    if user_id not in user_ids['users']:
        user_ids['users'][user_id] = user_ids['next_id']
        user_ids['next_id'] += 1
        save_user_ids(user_ids)
    return user_ids['users'][user_id]


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    data = load_data()

    if user_id not in data:
        data[user_id] = {
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name,
            'training_completed': False,
            'has_choice': False,
            'passport_issued': False,
            'in_training': False
        }
        save_data(data)

    user_data = data.get(user_id, {})
    has_choice = user_data.get('has_choice', False)

    if has_choice:
        keyboard = [
            ['üìä –ø–∞—Å–ø–æ—Ä—Ç', 'üß≥ —Ä–∞–±–æ—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–¢—ã —Å–Ω–æ–≤–∞ —Ç—É—ÇüôÇ? –†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—åüëÄ, –∫–∞–∫ –¥–µ–ª–∞ü§î?',
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            ['‚úîÔ∏è–ø—Ä–æ–π—Ç–∏', '‚ùå–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        message_text = (
            "<code>üñêÔ∏è –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å‚úîÔ∏è, —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µüìå?</code>\n\n"
            "<b>–ß—Ç–æ –±—É–¥–µ—Ç –≤ –æ–±—É—á–µ–Ω–∏–∏:</b>\n"
            "<blockquote>1. –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞üìä\n"
            "2. –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—Éüß≥\n"
            "3. –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –±–æ–Ω—É—Å üéÅ\n"
            "4. –ü–æ–ª—É—á–µ–Ω–∏–µ –º–∞—à–∏–Ω—ãüöó</blockquote>\n\n"
            "<b>–í—Å–µ —Ç–æ –∂–µ —Å–∞–º–æ–µ –±—É–¥–µ—Ç –∏ –±–µ–∑ –æ–±—É—á–µ–Ω–∏—è, –Ω–æ —É–∂–µ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ</b>"
        )

        await update.message.reply_text(
            message_text,
            reply_markup=reply_markup,
            parse_mode='HTML'
        )


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    text = update.message.text
    data = load_data()

    if user_id not in data:
        data[user_id] = {
            'username': update.effective_user.username,
            'first_name': update.effective_user.first_name,
            'last_name': update.effective_user.last_name,
            'training_completed': False,
            'has_choice': False,
            'passport_issued': False,
            'in_training': False
        }

    if text == '‚úîÔ∏è–ø—Ä–æ–π—Ç–∏':
        data[user_id]['training_completed'] = True
        data[user_id]['has_choice'] = True
        data[user_id]['in_training'] = True
        save_data(data)

        keyboard = [
            ['üìä –ø–∞—Å–ø–æ—Ä—Ç', 'üß≥ —Ä–∞–±–æ—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            '–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç',
            reply_markup=reply_markup
        )

    elif text == '‚ùå–æ—Ç–∫–∞–∑–∞—Ç—å—Å—è':
        data[user_id]['training_completed'] = False
        data[user_id]['has_choice'] = True
        data[user_id]['in_training'] = False
        save_data(data)
        keyboard = [
            ['üìä –ø–∞—Å–ø–æ—Ä—Ç', 'üß≥ —Ä–∞–±–æ—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
        await update.message.reply_text(
            '–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –æ–±—É—á–µ–Ω–∏—è. ‚ùå',
            reply_markup=reply_markup
        )

    elif text == 'üìä –ø–∞—Å–ø–æ—Ä—Ç':
        user_info = data[user_id]

        if user_info.get('in_training', False):
            keyboard = [
                [InlineKeyboardButton("üñã –æ—Ñ–æ—Ä–º–∏—Ç—å", callback_data="training_passport")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                '–≤—ã–±–µ—Ä–∏—Ç–µ "–æ—Ñ–æ—Ä–º–∏—Ç—å"',
                reply_markup=reply_markup
            )
        else:
            personal_id = get_user_personal_id(user_id)

            if user_info.get('passport_issued', False):
                passport_text = (
                    "<b>–í–∞—à –ø–∞—Å–ø–æ—Ä—Ç:</b>\n"
                    "<blockquote>1. –ò–º—è: {first_name}\n"
                    "2. ID: {personal_id}\n"
                    "3. –í–æ–∑—Ä–∞—Å—Ç: 18 –ª–µ—Ç\n"
                    "4. –ö–æ—à–µ–ª–µ–∫: 0\n"
                    "5. –ë—Ä–∞–∫: –Ω–µ—Ç—É\n"
                    "6. –†–∞–±–æ—Ç–∞: –Ω–µ—Ç—É</blockquote>"
                ).format(
                    first_name=user_info['first_name'],
                    personal_id=personal_id
                )
            else:
                passport_text = (
                    "<b>–í–∞—à –ø–∞—Å–ø–æ—Ä—Ç:</b>\n"
                    "<blockquote>1. –ò–º—è: –Ω–µ—Ç—É\n"
                    "2. ID: –Ω–µ—Ç—É\n"
                    "3. –í–æ–∑—Ä–∞—Å—Ç: 18 –ª–µ—Ç\n"
                    "4. –ö–æ—à–µ–ª–µ–∫: 0\n"
                    "5. –ë—Ä–∞–∫: –Ω–µ—Ç—É\n"
                    "6. –†–∞–±–æ—Ç–∞: –Ω–µ—Ç—É</blockquote>"
                )

            if not user_info.get('passport_issued', False):
                keyboard = [
                    [InlineKeyboardButton("üñã –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ", callback_data="start_passport")]
                ]
                reply_markup = InlineKeyboardMarkup(keyboard)
            else:
                reply_markup = None

            await update.message.reply_text(
                passport_text,
                reply_markup=reply_markup,
                parse_mode='HTML'
            )

    elif text == 'üß≥ —Ä–∞–±–æ—Ç–∞':
        if data[user_id].get('in_training', False):
            keyboard = [
                ['–æ—Ç–º–µ–Ω–∏—Ç—å‚ùå', '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úÖ']
            ]
            reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

            await update.message.reply_text(
                '–≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ, —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å?',
                reply_markup=reply_markup
            )
        else:
            keyboard = [
                [InlineKeyboardButton("üì¶–≥—Ä—É–∑—á–∏–∫", callback_data="work_loader")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await update.message.reply_text(
                '–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ãüß≥',
                reply_markup=reply_markup
            )

    elif text == '–æ—Ç–º–µ–Ω–∏—Ç—å‚ùå':
        data[user_id]['in_training'] = False
        data[user_id]['training_completed'] = False
        save_data(data)

        keyboard = [
            ['üìä –ø–∞—Å–ø–æ—Ä—Ç', 'üß≥ —Ä–∞–±–æ—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            '–û–±—É—á–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ',
            reply_markup=reply_markup
        )

    elif text == '–ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å‚úÖ':
        keyboard = [
            ['üìä –ø–∞—Å–ø–æ—Ä—Ç', 'üß≥ —Ä–∞–±–æ—Ç–∞']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            '–≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π –ø–∞—Å–ø–æ—Ä—Ç',
            reply_markup=reply_markup
        )

    save_data(data)


async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    data = load_data()

    await query.answer()

    if query.data == "training_passport":
        await query.edit_message_text('–Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ')

        emojis = ['üñã', 'üìÑ', '‚úÖ']
        random.shuffle(emojis)

        keyboard = [
            [InlineKeyboardButton(emojis[0], callback_data=f"training_step1_{emojis[0]}")],
            [InlineKeyboardButton(emojis[1], callback_data=f"training_step1_{emojis[1]}")],
            [InlineKeyboardButton(emojis[2], callback_data=f"training_step1_{emojis[2]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –≤—ã–±–µ—Ä–∏—Ç–µ üñã',
            reply_markup=reply_markup
        )

    elif query.data.startswith("training_step1_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == 'üñã':
            emojis = ['üñã', 'üìÑ', '‚úÖ']
            random.shuffle(emojis)

            keyboard = [
                [InlineKeyboardButton(emojis[0], callback_data=f"training_step2_{emojis[0]}")],
                [InlineKeyboardButton(emojis[1], callback_data=f"training_step2_{emojis[1]}")],
                [InlineKeyboardButton(emojis[2], callback_data=f"training_step2_{emojis[2]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                '–≤—ã–±–µ—Ä–∏—Ç–µ üìÑ',
                reply_markup=reply_markup
            )

    elif query.data.startswith("training_step2_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == 'üìÑ':
            emojis = ['üñã', 'üìÑ', '‚úÖ']
            random.shuffle(emojis)

            keyboard = [
                [InlineKeyboardButton(emojis[0], callback_data=f"training_step3_{emojis[0]}")],
                [InlineKeyboardButton(emojis[1], callback_data=f"training_step3_{emojis[1]}")],
                [InlineKeyboardButton(emojis[2], callback_data=f"training_step3_{emojis[2]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                '–≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ',
                reply_markup=reply_markup
            )

    elif query.data.startswith("training_step3_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == '‚úÖ':
            data[user_id]['passport_issued'] = True
            data[user_id]['in_training'] = False
            save_data(data)

            await query.edit_message_text(
                '–ø–æ–∑–¥—Ä–æ–≤–ª—è—é –≤—ã –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ'
            )

    elif query.data == "start_passport":
        await query.edit_message_text('–Ω–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ')

        emojis = ['üñã', 'üìÑ', '‚úÖ']
        random.shuffle(emojis)

        keyboard = [
            [InlineKeyboardButton(emojis[0], callback_data=f"passport_step1_{emojis[0]}")],
            [InlineKeyboardButton(emojis[1], callback_data=f"passport_step1_{emojis[1]}")],
            [InlineKeyboardButton(emojis[2], callback_data=f"passport_step1_{emojis[2]}")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text(
            '–æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –Ω–∞—á–∞–ª–æ—Å—å –≤—ã–±–µ—Ä–∏—Ç–µ üñã',
            reply_markup=reply_markup
        )

    elif query.data.startswith("passport_step1_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == 'üñã':
            emojis = ['üñã', 'üìÑ', '‚úÖ']
            random.shuffle(emojis)

            keyboard = [
                [InlineKeyboardButton(emojis[0], callback_data=f"passport_step2_{emojis[0]}")],
                [InlineKeyboardButton(emojis[1], callback_data=f"passport_step2_{emojis[1]}")],
                [InlineKeyboardButton(emojis[2], callback_data=f"passport_step2_{emojis[2]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                '–≤—ã–±–µ—Ä–∏—Ç–µ üìÑ',
                reply_markup=reply_markup
            )

    elif query.data.startswith("passport_step2_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == 'üìÑ':
            emojis = ['üñã', 'üìÑ', '‚úÖ']
            random.shuffle(emojis)

            keyboard = [
                [InlineKeyboardButton(emojis[0], callback_data=f"passport_step3_{emojis[0]}")],
                [InlineKeyboardButton(emojis[1], callback_data=f"passport_step3_{emojis[1]}")],
                [InlineKeyboardButton(emojis[2], callback_data=f"passport_step3_{emojis[2]}")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.edit_message_text(
                '–≤—ã–±–µ—Ä–∏—Ç–µ ‚úÖ',
                reply_markup=reply_markup
            )

    elif query.data.startswith("passport_step3_"):
        selected_emoji = query.data.split('_')[2]

        if selected_emoji == '‚úÖ':
            data[user_id]['passport_issued'] = True
            save_data(data)

            personal_id = get_user_personal_id(user_id)
            user_info = data[user_id]

            passport_text = (
                "<b>–í–∞—à –ø–∞—Å–ø–æ—Ä—Ç:</b>\n"
                "<blockquote>1. –ò–º—è: {first_name}\n"
                "2. ID: {personal_id}\n"
                "3. –í–æ–∑—Ä–∞—Å—Ç: 18 –ª–µ—Ç\n"
                "4. –ö–æ—à–µ–ª–µ–∫: 0\n"
                "5. –ë—Ä–∞–∫: –Ω–µ—Ç—É\n"
                "6. –†–∞–±–æ—Ç–∞: –Ω–µ—Ç—É</blockquote>"
            ).format(
                first_name=user_info['first_name'],
                personal_id=personal_id
            )

            await query.edit_message_text(
                f"–ø–æ–∑–¥—Ä–æ–≤–ª—è—é –≤—ã –æ—Ñ–æ—Ä–º–∏–ª–∏ –ø–∞—Å–ø–æ—Ä—Ç\n\n{passport_text}",
                parse_mode='HTML'
            )

    elif query.data == "work_loader":
        keyboard = [
            [InlineKeyboardButton("–Ω–∞–∑–∞–¥", callback_data="back_to_work")],
            [InlineKeyboardButton("—É—Å—Ç—Ä–æ–∏—Ç—å—Å—èüß±", callback_data="get_job_loader")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        with open(r"C:\Users\–Ω–∏–∫–∏—Ç–∞\Documents\Jack Seng\–≥—Ä—É–∑—á–∏–∫.jpg", 'rb') as photo:
            await query.message.reply_photo(
                photo=photo,
                caption=(
                    "üíº –†–∞–±–æ—Ç–∞ [üì¶–≥—Ä—É–∑—á–∏–∫]ü§ù\n\n"
                    "–ó–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –∑–∞ü§î –æ–¥–Ω—É –≤—ã–≥—Ä—É–∑–∫—É 3000$ü§ù\n\n"
                    "–ö—Ä–∏—Ç–µ—Ä–∏–∏:üìä\n"
                    "18 –ª–µ—ÇüôÇ\n"
                    "–ë–µ–∑ –æ–ø—ã—Ç–∞ü§ù\n\n"
                    "–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã üëÄ\n"
                    "1 ‚Äî –≤—ã–≥—Ä—É–∑–∫–∞ = 1 –º–∏–Ω—É—Ç–∞ ü§ù\n\n"
                    "–ñ–¥–µ–º –≤—Å–µ—Ö üíº"
                ),
                reply_markup=reply_markup
            )

    elif query.data == "back_to_work":
        keyboard = [
            [InlineKeyboardButton("üì¶–≥—Ä—É–∑—á–∏–∫", callback_data="work_loader")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(
            '–¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–∞–±–æ—Ç—ãüß≥',
            reply_markup=reply_markup
        )

    elif query.data == "get_job_loader":
        await query.edit_message_text('–í—ã —É—Å—Ç—Ä–æ–∏–ª–∏—Å—å –Ω–∞ —Ä–∞–±–æ—Ç—É üì¶–≥—Ä—É–∑—á–∏–∫')


def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    application = Application.builder().token("8202336530:AAGvVROUHMEV2Nqe6zvjtkSmt_-8AMbEdmQ").build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(handle_callback))

    application.run_polling()


if __name__ == '__main__':
    main()